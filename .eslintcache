[{"C:\\Github\\lux_client\\src\\index.js":"1","C:\\Github\\lux_client\\src\\reportWebVitals.js":"2","C:\\Github\\lux_client\\src\\components\\router.jsx":"3","C:\\Github\\lux_client\\src\\components\\dashboard\\people.jsx":"4","C:\\Github\\lux_client\\src\\components\\login\\register.jsx":"5","C:\\Github\\lux_client\\src\\components\\login\\login.jsx":"6","C:\\Github\\lux_client\\src\\components\\dashboard\\Post.jsx":"7","C:\\Github\\lux_client\\src\\components\\dashboard\\fetch.jsx":"8","C:\\Github\\lux_client\\src\\components\\dashboard\\post.jsx":"9","C:\\Github\\lux_client\\src\\components\\dashboard\\feed.jsx":"10"},{"size":752,"mtime":1608470021475,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1608470021476,"results":"13","hashOfConfig":"12"},{"size":381,"mtime":1608625382366,"results":"14","hashOfConfig":"12"},{"size":7132,"mtime":1608638716549,"results":"15","hashOfConfig":"12"},{"size":6142,"mtime":1608470021419,"results":"16","hashOfConfig":"12"},{"size":5637,"mtime":1608638627408,"results":"17","hashOfConfig":"12"},{"size":623,"mtime":1608471366708,"results":"18","hashOfConfig":"12"},{"size":182,"mtime":1608638321906,"results":"19","hashOfConfig":"12"},{"size":3057,"mtime":1608632587031,"results":"20","hashOfConfig":"12"},{"size":3590,"mtime":1608637543881,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"opbo5r",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"C:\\Github\\lux_client\\src\\index.js",[],["45","46"],"C:\\Github\\lux_client\\src\\reportWebVitals.js",[],"C:\\Github\\lux_client\\src\\components\\router.jsx",[],"C:\\Github\\lux_client\\src\\components\\dashboard\\people.jsx",["47"],"C:\\Github\\lux_client\\src\\components\\login\\register.jsx",[],"C:\\Github\\lux_client\\src\\components\\login\\login.jsx",["48"],"C:\\Github\\lux_client\\src\\components\\dashboard\\Post.jsx",[],"C:\\Github\\lux_client\\src\\components\\dashboard\\fetch.jsx",[],"C:\\Github\\lux_client\\src\\components\\dashboard\\post.jsx",["49"],"import React from 'react';\r\nimport './../dashboard/post.css';\r\nimport './../dashboard/comment.css';\r\nimport { getEncoded } from \"./../dashboard/fetch\";\r\n\r\nclass Post extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            name : props.name,\r\n            date : props.date,\r\n            content : props.content,\r\n            likes : props.likes,\r\n            comments : props.comments,\r\n            postId : props.id,\r\n            commentContent : '',\r\n            username : props.username,\r\n            password : props.password,\r\n            commentSSE : props.commentSSE\r\n        }\r\n        this.setState({comments : this.state.comments.sort((b, a) => b.id - a.id)})\r\n        this.commentHandler = this.commentHandler.bind(this)\r\n    }\r\n\r\n    changeHandler = (e) =>{\r\n        this.setState({commentContent : e.target.value})\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.state.commentSSE.addEventListener(\"comment\", (e)=>{\r\n            const postId = e.data.split('-')[0]\r\n            const c = JSON.parse(e.data.split('-')[1])\r\n            if(this.state.postId == postId){\r\n                this.setState({comments : this.state.comments.concat(c)})\r\n            }\r\n        })\r\n    }\r\n    \r\n    \r\n    async commentHandler(e){\r\n        const encoded = getEncoded();\r\n        const newComment = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + encoded,\r\n                'Access-Control-Allow-Origin': '*',\r\n            },\r\n            body: JSON.stringify({\r\n                content : this.state.commentContent\r\n            }),\r\n            credentials: 'same-origin'\r\n        }\r\n        const request = new Request(\"http://localhost:8080/comment/save?post_id=\"+this.state.postId, newComment)\r\n\r\n        const response = await fetch(request)\r\n        \r\n        \r\n        if(response.status === 200){\r\n            const savedComment = await response.json()\r\n            this.setState({comments : this.state.comments.concat(savedComment)})\r\n        }else{\r\n            alert(\"Error\")\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {name, date, content, likes, comments, postId, commentContent} = this.state\r\n\r\n        return(\r\n            <div className=\"post\">\r\n            <h3>{name}</h3>\r\n            <p>{content}</p>\r\n            <p>{likes.length+\" like\"}</p>\r\n            <p>{date}</p>\r\n            {comments.map(comment =>(\r\n                <div key={comment.id} className=\"comment\">\r\n                    <b>{comment.user.firstName+\" \"+comment.user.lastName+\":  \"}</b>{comment.content}\r\n                </div>\r\n            ))}\r\n            <textarea \r\n                //type=\"text\"\r\n                name={postId}\r\n                value={commentContent}\r\n                onChange={this.changeHandler}/>\r\n            <button type=\"button\" onClick={this.commentHandler}>Comment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post","C:\\Github\\lux_client\\src\\components\\dashboard\\feed.jsx",["50"],"import React, {Component} from \"react\";\r\nimport Post from './../dashboard/post';\r\nimport { getEncoded } from \"./fetch\";\r\n\r\nclass Feed extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            posts : props.posts,\r\n            username : props.username,\r\n            password : props.password,\r\n            newPost : '',\r\n            commentSSE : new EventSource(\"http://localhost:8080/comment/subscribe?username=\"+props.username)\r\n        }\r\n        this.postHandler = this.postHandler.bind(this)\r\n        this.loadPosts = this.loadPosts.bind(this)\r\n        this.setState({posts: this.loadPosts})\r\n    }\r\n\r\n    changeHandler = (e) =>{\r\n        if(e.target.name === \"newPost\"){\r\n            this.setState({newPost : e.target.value})\r\n        }\r\n    }\r\n\r\n    async loadPosts(){\r\n        const encoded = getEncoded();\r\n        const newLogin = {\r\n            method: 'GET',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Authorization': 'Basic ' + encoded,\r\n            'Access-Control-Allow-Origin': '*',\r\n            },\r\n            credentials: 'same-origin'\r\n        }\r\n\r\n        const request = new Request(\"http://localhost:8080/post/get\", newLogin);\r\n\r\n        const response = await fetch(request);\r\n\r\n        var postinput;\r\n\r\n        if(response.status===200){\r\n            postinput = await response.json();\r\n            this.setState({posts: postinput});\r\n        }\r\n        return postinput\r\n    }\r\n\r\n    async postHandler(e){\r\n        const encoded = getEncoded();\r\n        const newPost = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + encoded,\r\n                'Access-Control-Allow-Origin': '*',\r\n            },\r\n            body: JSON.stringify({\r\n                content : this.state.newPost\r\n            }),\r\n            credentials: 'same-origin'\r\n        }\r\n\r\n        const request = new Request(\"http://localhost:8080/post/save\", newPost)\r\n\r\n        const response = await fetch(request)\r\n        \r\n        if(response.status === 200){\r\n            const savedPost = await response.json()\r\n            savedPost.likes = []\r\n            savedPost.comments = []\r\n            this.setState({posts : [savedPost].concat(this.state.posts)})\r\n        }else{\r\n            alert(\"Error\")\r\n        }\r\n        this.loadPosts();\r\n    }\r\n\r\n    render(){\r\n        const {posts, newPost} = this.state;\r\n        return(\r\n            <div>\r\n                <div className=\"newpost\">\r\n                    <textarea\r\n                        name=\"newPost\"\r\n                        value={newPost}\r\n                        onChange={this.changeHandler}/>\r\n                    <button type=\"button\" onClick={this.postHandler}>Post</button>         \r\n                </div>\r\n                {posts.map(post =>(\r\n                    <Post\r\n                        name={post.user.firstName+\" \"+post.user.lastName}\r\n                        date={post.date}\r\n                        content={post.content}\r\n                        likes={post.likes}\r\n                        comments={post.comments}\r\n                        key={post.id}\r\n                        id={post.id}\r\n                        username={this.state.username}\r\n                        password={this.state.password}\r\n                        commentSSE={this.state.commentSSE}\r\n                    />\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Feed",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":6,"column":9,"nodeType":"57","messageId":"58","endLine":6,"endColumn":18},{"ruleId":"59","severity":1,"message":"60","line":22,"column":7,"nodeType":"61","messageId":"62","endLine":22,"endColumn":13},{"ruleId":"63","severity":1,"message":"64","line":33,"column":34,"nodeType":"65","messageId":"62","endLine":33,"endColumn":36},{"ruleId":"55","severity":1,"message":"66","line":1,"column":16,"nodeType":"57","messageId":"58","endLine":1,"endColumn":25},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'loadPosts' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'people'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]